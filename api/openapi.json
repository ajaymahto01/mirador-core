{
  "openapi": "3.0.3",
  "info": {
    "title": "MIRADOR-CORE API",
    "description": "Advanced Observability Platform REST API",
    "version": "5.0.0",
    "contact": {
      "name": "Platformbuilds Team",
      "email": "rv@platformbuilds.org"
    }
  },
  "servers": [
    {
      "url": "{scheme}://{host}{basePath}",
      "description": "Configurable server (edit variables in Swagger UI)",
      "variables": {
        "scheme": {
          "enum": [
            "http",
            "https"
          ],
          "default": "http"
        },
        "host": {
          "default": "localhost:8080",
          "description": "Hostname:port of mirador-core"
        },
        "basePath": {
          "default": "/api/v1",
          "description": "Base path for API routes (use \"/\" for root-only endpoints)"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Session token from LDAP/AD or SSO"
      }
    },
    "schemas": {
      "SystemFracture": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "component": {
            "type": "string"
          },
          "fracture_type": {
            "type": "string",
            "enum": [
              "fatigue",
              "overload",
              "degradation"
            ]
          },
          "time_to_fracture": {
            "type": "integer",
            "description": "Seconds until predicted fracture"
          },
          "severity": {
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          "probability": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "CorrelationResult": {
        "type": "object",
        "properties": {
          "correlation_id": {
            "type": "string"
          },
          "root_cause": {
            "type": "string"
          },
          "confidence": {
            "type": "number"
          },
          "red_anchors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedAnchor"
            }
          }
        }
      },
      "RedAnchor": {
        "type": "object",
        "description": "Anomaly score pattern for RCA analysis",
        "properties": {
          "service": {
            "type": "string"
          },
          "metric": {
            "type": "string"
          },
          "anomaly_score": {
            "type": "number"
          },
          "threshold": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "data_type": {
            "type": "string",
            "enum": [
              "metrics",
              "logs",
              "traces"
            ]
          }
        }
      },
      "ServiceGraphRequest": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "Start of the evaluation window (RFC3339)"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "End of the evaluation window (RFC3339)"
          },
          "client": {
            "type": "string",
            "description": "Optional client service filter"
          },
          "server": {
            "type": "string",
            "description": "Optional server service filter"
          },
          "connection_type": {
            "type": "string",
            "description": "Optional connection type filter (for example \"http\")"
          }
        }
      },
      "ServiceGraphLatency": {
        "type": "object",
        "properties": {
          "avg_ms": {
            "type": "number",
            "format": "double",
            "description": "Average latency in milliseconds over the selected window"
          }
        }
      },
      "ServiceGraphEdge": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Client service emitting the request"
          },
          "target": {
            "type": "string",
            "description": "Server service handling the request"
          },
          "connection_type": {
            "type": "string",
            "description": "Connection type inferred by the servicegraph connector"
          },
          "call_count": {
            "type": "number",
            "format": "double",
            "description": "Total calls between the services over the window"
          },
          "call_rate": {
            "type": "number",
            "format": "double",
            "description": "Average calls per minute during the window"
          },
          "error_count": {
            "type": "number",
            "format": "double",
            "description": "Failed calls over the window"
          },
          "error_rate": {
            "type": "number",
            "format": "double",
            "description": "Percentage of failed calls over total calls"
          },
          "server_latency_ms": {
            "$ref": "#/components/schemas/ServiceGraphLatency"
          },
          "client_latency_ms": {
            "$ref": "#/components/schemas/ServiceGraphLatency"
          },
          "unpaired_spans": {
            "type": "number",
            "format": "double",
            "description": "Count of unpaired spans contributing to the edge"
          },
          "dropped_spans": {
            "type": "number",
            "format": "double",
            "description": "Count of dropped spans while building the edge"
          }
        }
      },
      "ServiceGraphWindow": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "duration_seconds": {
            "type": "integer",
            "description": "Duration of the evaluation window in seconds"
          }
        }
      },
      "ServiceGraphResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time"
          },
          "window": {
            "$ref": "#/components/schemas/ServiceGraphWindow"
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceGraphEdge"
            }
          }
        }
      },
      "FlameNode": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "description": "Duration in ms"
          },
          "spanId": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlameNode"
            }
          }
        }
      },
      "MetricsQLFunctionRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The MetricsQL query expression to aggregate"
          },
          "params": {
            "type": "object",
            "description": "Optional parameters for the aggregate function (e.g., quantile value, k value for topk/bottomk)",
            "additionalProperties": true
          }
        },
        "required": [
          "query"
        ]
      },
      "MetricsQLFunctionRangeRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The MetricsQL query expression to aggregate"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "Start time for the range query (RFC3339 format)"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "End time for the range query (RFC3339 format)"
          },
          "step": {
            "type": "string",
            "description": "Step duration for the range query (e.g., \"15s\", \"1m\", \"1h\")"
          },
          "params": {
            "type": "object",
            "description": "Optional parameters for the aggregate function (e.g., quantile value, k value for topk/bottomk)",
            "additionalProperties": true
          }
        },
        "required": [
          "query",
          "start",
          "end",
          "step"
        ]
      },
      "MetricsQLQueryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "metric": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array containing [timestamp, value] pair"
                    }
                  }
                }
              },
              "resultType": {
                "type": "string",
                "enum": [
                  "vector",
                  "matrix",
                  "scalar",
                  "string"
                ]
              }
            }
          },
          "error": {
            "type": "string",
            "description": "Error message if status is 'error'"
          },
          "errorType": {
            "type": "string",
            "description": "Type of error if status is 'error'"
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Returns basic service health",
        "responses": {
          "200": {
            "description": "Healthy"
          }
        }
      }
    },
    "/ready": {
      "get": {
        "summary": "Readiness check",
        "description": "Checks backends (Victoria*, engines) and returns readiness",
        "responses": {
          "200": {
            "description": "Ready"
          },
          "503": {
            "description": "Not ready"
          }
        }
      }
    },
    "/predict/analyze": {
      "post": {
        "summary": "Analyze system fractures",
        "description": "Predict possible fracture/fatigue in running services",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "component": {
                    "type": "string"
                  },
                  "time_range": {
                    "type": "string"
                  },
                  "model_types": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fracture analysis results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fractures": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SystemFracture"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rca/investigate": {
      "post": {
        "summary": "Start RCA investigation",
        "description": "Correlate incidents using red anchors pattern across metrics, logs, traces",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "incident_id": {
                    "type": "string"
                  },
                  "symptoms": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "time_range": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "end": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RCA correlation results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorrelationResult"
                }
              }
            }
          }
        }
      }
    },
    "/predict/health": {
      "get": {
        "summary": "Predict Engine health",
        "responses": {
          "200": {
            "description": "Healthy"
          }
        }
      }
    },
    "/predict/fractures": {
      "get": {
        "summary": "List predicted fractures",
        "parameters": [
          {
            "in": "query",
            "name": "time_range",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "min_prob",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/predict/models": {
      "get": {
        "summary": "List active prediction models",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schema/traces/services": {
      "post": {
        "summary": "Upsert trace service definition",
        "description": "Create or update a trace service definition and record a new version.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TraceServiceRequest"
              },
              "example": {
                "service": "otelgen",
                "purpose": "this is a test service created by otelgen tool",
                "owner": "aarvee",
                "tags": [
                  "development",
                  "bda"
                ],
                "author": "aarvee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/traces/services/bulk": {
      "post": {
        "summary": "Bulk upsert trace services via CSV",
        "description": "Upload a CSV to create/update trace service definitions.\nCSV columns (header required; strict header mode):\n- tenant_id (optional; defaults to request tenant)\n- service (required)\n- purpose, owner, tags_json (JSON array), author\nSecurity: 5MiB payload limit, MIME allowlist with sniffing, UTF‑8 validation, CSV injection mitigation, no disk writes.\nLimits: header strict mode (reject unknown columns), 10k row cap, per‑tenant daily quota (429 on exceed).\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/schema/traces/services/{service}": {
      "get": {
        "summary": "Get current trace service definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete trace service definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "confirm",
            "schema": {
              "type": "string"
            },
            "description": "Must be '1', 'true', or 'yes'"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Failed to delete"
          }
        }
      }
    },
    "/schema/traces/services/{service}/versions": {
      "get": {
        "summary": "List versions for a trace service",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schema/traces/services/{service}/versions/{version}": {
      "get": {
        "summary": "Get a specific version of a trace service definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/schema/traces/operations": {
      "post": {
        "summary": "Upsert trace operation definition",
        "description": "Create or update a trace operation definition and record a new version.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TraceOperationRequest"
              },
              "example": {
                "service": "otelgen",
                "operation": "handle_request",
                "purpose": "handles incoming HTTP requests",
                "owner": "aarvee",
                "tags": [
                  "POST",
                  "/api/v1/data",
                  "30s"
                ],
                "author": "aarvee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/traces/operations/bulk": {
      "post": {
        "summary": "Bulk upsert trace operations via CSV",
        "description": "Upload a CSV to create/update trace operation definitions. Operations are scoped per service; rows referencing undefined services are rejected.\nCSV columns (header required; strict header mode):\n- tenant_id (optional; defaults to request tenant)\n- service (required)\n- operation (required)\n- purpose, owner, tags_json (JSON array), author\nSecurity: 5MiB payload limit, MIME allowlist with sniffing, UTF‑8 validation, CSV injection mitigation, no disk writes.\nLimits: header strict mode (reject unknown columns), 10k row cap, per‑tenant daily quota (429 on exceed).\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/schema/traces/services/{service}/operations/{operation}": {
      "get": {
        "summary": "Get current trace operation definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "summary": "Delete trace operation definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "confirm",
            "schema": {
              "type": "string"
            },
            "description": "Must be '1', 'true', or 'yes'"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Failed to delete"
          }
        }
      }
    },
    "/schema/traces/services/{service}/operations/{operation}/versions": {
      "get": {
        "summary": "List versions for a trace operation",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/schema/traces/services/{service}/operations/{operation}/versions/{version}": {
      "get": {
        "summary": "Get a specific version of a trace operation definition",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/schema/metrics": {
      "post": {
        "summary": "Upsert metric definition",
        "description": "Create or update a metric definition and record a new version.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "metric"
                ],
                "properties": {
                  "tenantId": {
                    "type": "string"
                  },
                  "metric": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "author": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/metrics/bulk": {
      "post": {
        "summary": "Bulk upsert metric and label definitions (CSV)",
        "description": "Upload a CSV to create/update metric and label definitions.\nSecurity: payload limited to 5MiB, MIME allowlist, UTF‑8 validation, and CSV injection mitigations.\n\nColumns (header required):\n\n- tenant_id (optional; defaults to authenticated tenant)\n- metric (required)\n- description\n- owner\n- tags_json (JSON array)\n- label\n- label_type\n- label_required (true/false/1/0/yes/no)\n- label_allowed_json (JSON object)\n- label_description\n- author\n\nNote: Use the sample endpoint below to generate a pre-filled template.\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/metrics/bulk/sample": {
      "get": {
        "summary": "Download sample CSV template",
        "description": "Generates a CSV with header and rows per metric/label to guide users.\n- If `metrics` is omitted, the server enumerates all metric names (via `__name__`) and includes a row per discovered label.\n- If `metrics` is provided (comma-separated), only those metrics are included.\n",
        "parameters": [
          {
            "in": "query",
            "name": "metrics",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated metric names to include in the sample"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/schema/metrics/{metric}": {
      "get": {
        "summary": "Get metric definition",
        "parameters": [
          {
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete metric definition",
        "parameters": [
          {
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "confirm",
            "schema": {
              "type": "string"
            },
            "description": "Must be '1', 'true', or 'yes'"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Failed to delete"
          }
        }
      }
    },
    "/schema/metrics/{metric}/versions": {
      "get": {
        "summary": "List metric definition versions",
        "parameters": [
          {
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "integer"
                          },
                          "author": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/metrics/{metric}/versions/{version}": {
      "get": {
        "summary": "Get specific metric definition version",
        "parameters": [
          {
            "in": "path",
            "name": "metric",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/schema/labels": {
      "post": {
        "summary": "Upsert label definition (independent)",
        "description": "Create or update a label definition (not tied to a metric) and record a new version.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelRequest"
              },
              "example": {
                "name": "instance",
                "type": "string",
                "required": false,
                "allowedValues": {},
                "description": "Pod or host instance label",
                "author": "aarvee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/labels/{name}": {
      "get": {
        "summary": "Get label definition",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete label definition",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "confirm",
            "schema": {
              "type": "string"
            },
            "description": "Must be '1', 'true', or 'yes'"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Failed to delete"
          }
        }
      }
    },
    "/schema/labels/{name}/versions": {
      "get": {
        "summary": "List label definition versions",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "integer"
                          },
                          "author": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/labels/{name}/versions/{version}": {
      "get": {
        "summary": "Get specific label definition version",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/schema/labels/bulk": {
      "post": {
        "summary": "Bulk upsert label definitions (CSV)",
        "description": "Upload a CSV to create/update label definitions.\nSecurity: 5MiB payload limit, MIME allowlist, UTF‑8 validation, CSV injection mitigation, daily per‑tenant quota.\n\nColumns (header required):\n- tenant_id (optional)\n- name (required)\n- type\n- required (true/false/1/0/yes/no)\n- allowed_json (JSON object)\n- description\n- author\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/schema/labels/bulk/sample": {
      "get": {
        "summary": "Download sample CSV template for labels",
        "description": "Generates a CSV with header and example rows for common labels.",
        "responses": {
          "200": {
            "description": "CSV",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/schema/logs/fields": {
      "post": {
        "summary": "Upsert log field definition",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "field"
                ],
                "properties": {
                  "tenantId": {
                    "type": "string"
                  },
                  "field": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "examples": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "author": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/schema/logs/fields/bulk": {
      "post": {
        "summary": "Bulk upsert log field definitions (CSV)",
        "description": "Upload a CSV to create/update log field definitions.\nSecurity: 5MiB payload limit, MIME allowlist, UTF‑8 validation, CSV injection mitigation, daily per‑tenant quota.\n\nColumns (header required):\n- tenant_id (optional)\n- field (required)\n- type\n- description\n- tags_json (JSON array)\n- examples_json (JSON object)\n- author\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too Many Requests"
          }
        }
      }
    },
    "/schema/logs/fields/bulk/sample": {
      "get": {
        "summary": "Download sample CSV template for log fields",
        "description": "Generates a CSV with header and one row per discovered log field.",
        "responses": {
          "200": {
            "description": "CSV",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/schema/logs/fields/{field}": {
      "get": {
        "summary": "Get log field definition",
        "parameters": [
          {
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "Delete log field definition",
        "parameters": [
          {
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "confirm",
            "schema": {
              "type": "string"
            },
            "description": "Must be '1', 'true', or 'yes'"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Failed to delete"
          }
        }
      }
    },
    "/schema/logs/fields/{field}/versions": {
      "get": {
        "summary": "List log field definition versions",
        "parameters": [
          {
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "integer"
                          },
                          "author": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/logs/fields/{field}/versions/{version}": {
      "get": {
        "summary": "Get specific log field definition version",
        "parameters": [
          {
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/rca/correlations": {
      "get": {
        "summary": "Get active correlations",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rca/patterns": {
      "get": {
        "summary": "Get failure patterns",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rca/service-graph": {
      "post": {
        "summary": "Aggregate service graph metrics",
        "description": "Aggregates OpenTelemetry service graph metrics emitted by the\n`servicegraph` connector across every configured VictoriaMetrics source\nand returns the directed dependency edges for the requested window.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceGraphRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service graph edges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGraphResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Failed to fetch service graph"
          }
        }
      }
    },
    "/rca/store": {
      "post": {
        "summary": "Store correlation event",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/query": {
      "post": {
        "summary": "MetricsQL instant query (VictoriaMetrics)",
        "deprecated": true,
        "description": "Executes an instant query against VictoriaMetrics. The `query` field also supports Lucene syntax when\n`query_language` is `lucene` (or when auto-detected); Mirador translates Lucene into PromQL label selectors.\nWhen `include_definitions` is enabled (default),\nthe response contains `definitions` sourced from the schema store (Weaviate) including metric and\nper-metric label definitions. Optional `label_keys` can limit which label keys are considered.\nWhen multiple metrics sources are configured in config.yaml (database.victoria_metrics + database.metrics_sources),\nthe server fans out the query across sources and aggregates the results. Identical series from different sources may appear as duplicates.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "promql"
                    ],
                    "description": "If `lucene`, the server translates to PromQL/MetricsQL."
                  },
                  "time": {
                    "type": "string"
                  },
                  "include_definitions": {
                    "type": "boolean",
                    "description": "Include definitions in response (default true)"
                  },
                  "label_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Restrict definitions to these label keys"
                  }
                }
              },
              "example": {
                "query_language": "lucene",
                "query": "__name__:http_requests_total AND job:api",
                "time": "2025-01-01T00:00:00Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": {
                    "resultType": "vector",
                    "result": [
                      {
                        "metric": {
                          "__name__": "http_requests_total",
                          "job": "api",
                          "instance": "pod-1"
                        },
                        "value": [
                          1690003600,
                          "1"
                        ]
                      }
                    ]
                  },
                  "metadata": {
                    "executionTime": 12,
                    "seriesCount": 1,
                    "cached": false,
                    "timestamp": "2025-09-08 10:00:00+00:00"
                  },
                  "definitions": {
                    "metrics": {
                      "http_requests_total": {
                        "tenantId": "t1",
                        "metric": "http_requests_total",
                        "description": "Total number of HTTP requests",
                        "owner": "team-observability",
                        "tags": [
                          "domain:web"
                        ]
                      }
                    },
                    "labels": {
                      "http_requests_total": {
                        "instance": {
                          "tenantId": "t1",
                          "metric": "http_requests_total",
                          "label": "instance",
                          "type": "string",
                          "required": false,
                          "description": "The pod or host instance"
                        },
                        "job": {
                          "definition": "No definition provided. Use /api/v1/schema/metrics to add label definition."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/query_range": {
      "post": {
        "summary": "MetricsQL range query (VictoriaMetrics)",
        "deprecated": true,
        "description": "Executes a range query. When `include_definitions` is enabled (default), the response contains\n`definitions` for metrics and per-metric label keys. Use `label_keys` to limit keys.\nWhen multiple metrics sources are configured, the server fans out the query and concatenates series across sources; datapoint counts are aggregated.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "promql"
                    ],
                    "description": "If `lucene`, the server translates to PromQL/MetricsQL."
                  },
                  "start": {
                    "type": "string"
                  },
                  "end": {
                    "type": "string"
                  },
                  "step": {
                    "type": "string"
                  },
                  "include_definitions": {
                    "type": "boolean",
                    "description": "Include definitions in response (default true)"
                  },
                  "label_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Restrict definitions to these label keys"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "status": "success",
                  "data": {
                    "resultType": "matrix",
                    "result": [
                      {
                        "metric": {
                          "__name__": "http_requests_total",
                          "job": "api",
                          "instance": "pod-1"
                        },
                        "values": [
                          [
                            1690000000,
                            "1"
                          ],
                          [
                            1690000300,
                            "2"
                          ]
                        ]
                      }
                    ]
                  },
                  "metadata": {
                    "executionTime": 18,
                    "dataPoints": 2,
                    "timeRange": "1690000000 to 1690003600",
                    "step": 30
                  },
                  "definitions": {
                    "metrics": {
                      "http_requests_total": {
                        "description": "Total number of HTTP requests"
                      }
                    },
                    "labels": {
                      "http_requests_total": {
                        "instance": {
                          "type": "string",
                          "required": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/series": {
      "get": {
        "summary": "Series listing",
        "parameters": [
          {
            "in": "query",
            "name": "match",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/labels": {
      "get": {
        "summary": "Labels listing",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metrics/names": {
      "get": {
        "summary": "List metric names",
        "description": "Returns values of the special label `__name__` from VictoriaMetrics.",
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "string"
            },
            "description": "Start time (RFC3339 or unix seconds)"
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "type": "string"
            },
            "description": "End time (RFC3339 or unix seconds)"
          },
          {
            "in": "query",
            "name": "match[]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "description": "Optional label matchers"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/label/{name}/values": {
      "get": {
        "summary": "Label values",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/logs/query": {
      "post": {
        "summary": "LogsQL query (VictoriaLogs)",
        "description": "Accepts Lucene expressions via `query` when `query_language` is `lucene` (or when auto-detected).\nMirador translates Lucene to VictoriaLogs query syntax.\nNote: Use either `_time` inside `query` or top-level `start`/`end`, not both. If both are provided, the\nserver prioritizes `_time` in `query` to avoid conflicting time filters.\nWhen multiple logs sources are configured in config.yaml (database.victoria_logs + database.logs_sources),\nthe server fans out the query and concatenates rows from all sources; the `fields` list is the union.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "LogsQL expression (e.g., `{service.name=\"telemetrygen\"} AND severity=\"Info\" AND _msg~\"message\"`)"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "logsql"
                    ],
                    "description": "If `lucene`, the server translates to VictoriaLogs query."
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Start time in milliseconds since epoch"
                  },
                  "end": {
                    "type": "integer",
                    "format": "int64",
                    "description": "End time in milliseconds since epoch"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Max rows to return (default 1000)"
                  },
                  "tenantId": {
                    "type": "string",
                    "description": "Optional tenant override"
                  }
                }
              },
              "example": {
                "query_language": "lucene",
                "query": "_time:[now-15m, now] AND service.name:telemetrygen AND severity:Info",
                "limit": 200
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/logs/streams": {
      "get": {
        "summary": "Log streams",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/logs/fields": {
      "get": {
        "summary": "Log fields",
        "description": "Returns only the union of field names derived from a hardcoded query over the last 10 minutes. Response contains only the fields array.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fields": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logs/export": {
      "post": {
        "summary": "Export logs (streaming)",
        "description": "Streams a file attachment. Defaults to CSV when format is omitted. May convert JSON/NDJSON to CSV on the fly.\nAccepts Lucene via `query_language=lucene` and translates to VictoriaLogs query.\nNote: Use either `_time` inside `query` or top-level `start`/`end`, not both. If both are provided, the\nserver prioritizes `_time` in `query`.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "logsql"
                    ]
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "end": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "limit": {
                    "type": "integer"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "csv",
                      "json"
                    ]
                  }
                }
              },
              "example": {
                "query_language": "lucene",
                "query": "_time:[now-5m, now] AND level:error",
                "format": "csv"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File stream",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/logs/store": {
      "post": {
        "summary": "Store JSON event to logs",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/logs/histogram": {
      "get": {
        "summary": "Histogram (D3)",
        "description": "Supports Lucene via `query_language=lucene` (server translates to VictoriaLogs query). Response shape unchanged\nfor D3. Note: Use either `_time` in `query` or top-level `start`/`end`, not both. If both are present, `_time`\nin `query` takes precedence.\n",
        "parameters": [
          {
            "in": "query",
            "name": "query_language",
            "schema": {
              "type": "string",
              "enum": [
                "lucene",
                "logsql"
              ]
            },
            "description": "If `lucene`, the server translates to VictoriaLogs query."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Lucene expression for filtering logs",
            "example": "_time:[now-30m, now]"
          },
          {
            "in": "query",
            "name": "step",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Bucket width in ms",
            "example": 60000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "buckets": [
                    {
                      "ts": 1737000000000,
                      "count": 42
                    },
                    {
                      "ts": 1737000060000,
                      "count": 30
                    }
                  ],
                  "stats": {
                    "buckets": 2,
                    "sampleN": 1
                  },
                  "sampled": false
                }
              }
            }
          }
        }
      }
    },
    "/logs/facets": {
      "get": {
        "summary": "Facets (D3)",
        "description": "Supports Lucene via `query_language=lucene` (server translates to VictoriaLogs query). Response shape unchanged\nfor D3. Note: Use either `_time` in `query` or top-level `start`/`end`, not both. If both are present, `_time`\nin `query` takes precedence.\n",
        "parameters": [
          {
            "in": "query",
            "name": "query_language",
            "schema": {
              "type": "string",
              "enum": [
                "lucene",
                "logsql"
              ]
            },
            "description": "If `lucene`, the server translates to VictoriaLogs query."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Lucene expression for filtering logs before faceting",
            "example": "_time:[now-30m, now] AND level:error"
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated fields to facet on",
            "example": "service,host"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "facets": [
                    {
                      "field": "service",
                      "buckets": [
                        {
                          "key": "checkout",
                          "count": 120
                        },
                        {
                          "key": "api",
                          "count": 75
                        }
                      ]
                    }
                  ],
                  "stats": {
                    "fields": 1,
                    "sampleN": 1
                  },
                  "sampled": false
                }
              }
            }
          }
        }
      }
    },
    "/logs/search": {
      "post": {
        "summary": "Search logs (D3)",
        "description": "Supports Lucene via `query_language=lucene`; translated to VictoriaLogs query. Note: Use either `_time` in\n`query` or top-level `start`/`end`, not both. If both are present, `_time` in `query` takes precedence.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "LogsQL expression (e.g., \"_time:5m service=web\")"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "logsql"
                    ]
                  },
                  "start": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Start time in ms since epoch"
                  },
                  "end": {
                    "type": "integer",
                    "format": "int64",
                    "description": "End time in ms since epoch"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Rows per page (default 1000, max 10000)"
                  },
                  "page_after": {
                    "type": "object",
                    "properties": {
                      "ts": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Cursor timestamp (ms)"
                      },
                      "offset": {
                        "type": "integer",
                        "description": "Offset for same-ms rows"
                      }
                    }
                  },
                  "tenantId": {
                    "type": "string",
                    "description": "Optional tenant override"
                  }
                }
              },
              "example": {
                "query_language": "lucene",
                "query": "_time:15m AND level:error",
                "limit": 200
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/logs/tail": {
      "get": {
        "summary": "Tail logs (WebSocket)",
        "description": "Upgrades to a WebSocket connection and streams log rows as JSON frames.\nNote: Swagger \"Try it out\" sends a normal HTTP request and will not work here.\nUse a WebSocket client, for example:\n\n- wscat: `wscat -c ws://localhost:8080/api/v1/logs/tail?query=_time:5m&sampling=10`\n- websocat: `websocat -n ws://localhost:8080/api/v1/logs/tail?query=_time:5m`\n- Browser console: `new WebSocket(\"ws://localhost:8080/api/v1/logs/tail?query=_time:5m\")`\n\nQuery parameters:\n- `query`: LogsQL expression (e.g., `_time:5m`)\n- `since`: Start time in milliseconds since epoch (defaults to last 5 minutes)\n- `sampling`: Send every Nth row (integer, default 1)\n- `tenantId`: Optional tenant override\n",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "LogsQL expression (e.g., `_time:5m`)"
          },
          {
            "in": "query",
            "name": "query_language",
            "schema": {
              "type": "string",
              "enum": [
                "lucene",
                "logsql"
              ]
            },
            "description": "If `lucene`, the server translates to VictoriaLogs query."
          },
          {
            "in": "query",
            "name": "since",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Start timestamp in ms (defaults to now-5m)"
          },
          {
            "in": "query",
            "name": "sampling",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Downsample by sending every Nth row (default 1)"
          },
          {
            "in": "query",
            "name": "tenantId",
            "schema": {
              "type": "string"
            },
            "description": "Optional tenant override for the request"
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols (WebSocket upgrade successful)"
          },
          "426": {
            "description": "Upgrade Required — endpoint must be called via WebSocket (not HTTP)"
          }
        }
      }
    },
    "/traces/services": {
      "get": {
        "summary": "List services (VictoriaTraces/Jaeger)",
        "description": "Returns the union of services when multiple traces sources are configured (database.victoria_traces + database.traces_sources).",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/traces/services/{service}/operations": {
      "get": {
        "summary": "List operations for a service",
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/traces/{traceId}": {
      "get": {
        "summary": "Get trace by ID",
        "description": "Returns the first matching trace across configured sources when multiple traces sources are present.",
        "parameters": [
          {
            "in": "path",
            "name": "traceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/traces/{traceId}/flamegraph": {
      "get": {
        "summary": "Flame graph tree for a trace (D3)",
        "description": "Returns a hierarchical structure suitable for d3-flame-graph built from the Jaeger trace spans using CHILD_OF references.",
        "parameters": [
          {
            "in": "path",
            "name": "traceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string",
              "enum": [
                "duration",
                "self"
              ]
            },
            "description": "Node sizing mode. duration = total span duration; self = duration minus children durations (approximate)."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "integer"
                        },
                        "children": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FlameNode"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/traces/flamegraph/search": {
      "post": {
        "summary": "Aggregate flame graph over a traces search (D3)",
        "description": "Searches VictoriaTraces (Jaeger) and merges returned traces into a single flame graph tree. Useful for service-level flame graphs over a time window.",
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string",
              "enum": [
                "duration",
                "self"
              ]
            },
            "description": "Node sizing mode. duration = total span duration; self = duration minus children durations (approximate)."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FlameNode"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/traces/search": {
      "post": {
        "summary": "Search traces",
        "description": "Jaeger-compatible search across traces. This endpoint also accepts a Lucene expression via\n`query_language=lucene` and `query`, which Mirador translates into Jaeger filters (service,\noperation, tags, durations, and time window). Note: Use either `_time` in `query` or top-level `start`/`end`,\nnot both. If both are provided, `_time` in `query` takes precedence. Alternatively, discover trace IDs via\n`/logs/search` with a Lucene filter on `trace_id`, then fetch traces by ID using `/traces/{traceId}`.\nWhen multiple traces sources are configured in config.yaml (database.victoria_traces + database.traces_sources),\nresults from all sources are concatenated.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Optional Lucene expression (e.g., \"_time:[now-15m TO now] AND service:checkout AND operation:CreateOrder AND duration:[10ms TO *]\")"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene"
                    ],
                    "description": "Set to `lucene` to enable translation"
                  },
                  "service": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "string",
                    "description": "Comma-separated key=value pairs"
                  },
                  "minDuration": {
                    "type": "string"
                  },
                  "maxDuration": {
                    "type": "string"
                  },
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "limit": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/datasources": {
      "get": {
        "summary": "Get data sources",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Add data source",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/user-settings": {
      "get": {
        "summary": "Get user settings",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "summary": "Update user settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/integrations": {
      "get": {
        "summary": "Get integrations config",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sessions/active": {
      "get": {
        "summary": "Get active sessions (current user)",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sessions/invalidate": {
      "post": {
        "summary": "Invalidate a session",
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sessions/user/{userId}": {
      "get": {
        "summary": "Get sessions for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rbac/roles": {
      "get": {
        "summary": "List roles",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Create role",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rbac/users/{userId}/roles": {
      "put": {
        "summary": "Assign user roles",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ws/metrics": {
      "get": {
        "summary": "Metrics stream (WebSocket)",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          }
        }
      }
    },
    "/ws/alerts": {
      "get": {
        "summary": "Alerts stream (WebSocket)",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          }
        }
      }
    },
    "/ws/predictions": {
      "get": {
        "summary": "Predictions stream (WebSocket)",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          }
        }
      }
    }
  },
  "TraceServiceRequest": {
    "type": "object",
    "properties": {
      "tenantId": {
        "type": "string",
        "description": "Optional tenant ID (defaults to request tenant)"
      },
      "service": {
        "type": "string",
        "description": "Service name"
      },
      "purpose": {
        "type": "string",
        "description": "Service purpose/description"
      },
      "owner": {
        "type": "string",
        "description": "Service owner"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Flat list of tags (e.g., \"key:value\" or free-form labels)",
        "example": [
          "environment:production",
          "team:platform",
          "version:1.2.3"
        ]
      },
      "author": {
        "type": "string",
        "description": "Author of this change"
      }
    },
    "required": [
      "service"
    ]
  },
  "TraceOperationRequest": {
    "type": "object",
    "properties": {
      "tenantId": {
        "type": "string",
        "description": "Optional tenant ID (defaults to request tenant)"
      },
      "service": {
        "type": "string",
        "description": "Service name"
      },
      "operation": {
        "type": "string",
        "description": "Operation name"
      },
      "purpose": {
        "type": "string",
        "description": "Operation purpose/description"
      },
      "owner": {
        "type": "string",
        "description": "Operation owner"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Flat list of tags",
        "example": [
          "GET",
          "/api/v1/users",
          "30s"
        ]
      },
      "author": {
        "type": "string",
        "description": "Author of this change"
      }
    },
    "required": [
      "service",
      "operation"
    ]
  },
  "MetricRequest": {
    "type": "object",
    "properties": {
      "tenantId": {
        "type": "string",
        "description": "Optional tenant ID (defaults to request tenant)"
      },
      "metric": {
        "type": "string",
        "description": "Metric name"
      },
      "description": {
        "type": "string",
        "description": "Metric description"
      },
      "owner": {
        "type": "string",
        "description": "Metric owner"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Flat list of tags",
        "example": [
          "category:performance",
          "unit:seconds",
          "source:prometheus"
        ]
      },
      "author": {
        "type": "string",
        "description": "Author of this change"
      }
    },
    "required": [
      "metric"
    ]
  },
  "LogFieldRequest": {
    "type": "object",
    "properties": {
      "tenantId": {
        "type": "string",
        "description": "Optional tenant ID (defaults to request tenant)"
      },
      "field": {
        "type": "string",
        "description": "Log field name"
      },
      "type": {
        "type": "string",
        "description": "Field data type"
      },
      "description": {
        "type": "string",
        "description": "Field description"
      },
      "tags": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Flat list of tags",
        "example": [
          "category:security",
          "format:json",
          "indexed:true"
        ]
      },
      "examples": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Example values as key-value string pairs",
        "example": {
          "normal": "INFO",
          "error": "ERROR",
          "debug": "DEBUG"
        }
      },
      "author": {
        "type": "string",
        "description": "Author of this change"
      }
    },
    "required": [
      "field"
    ]
  },
  "LabelRequest": {
    "type": "object",
    "properties": {
      "tenantId": {
        "type": "string",
        "description": "Optional tenant ID (defaults to request tenant)"
      },
      "name": {
        "type": "string",
        "description": "Label name (e.g., instance)"
      },
      "type": {
        "type": "string",
        "description": "Data type (string, number, bool, etc.)"
      },
      "required": {
        "type": "boolean"
      },
      "allowedValues": {
        "type": "object",
        "additionalProperties": true,
        "description": "Optional allowed set or constraints map"
      },
      "description": {
        "type": "string"
      },
      "author": {
        "type": "string",
        "description": "Author of this change"
      }
    },
    "required": [
      "name"
    ],
    "/metrics/query": {
      "post": {
        "summary": "MetricsQL instant query (VictoriaMetrics)",
        "description": "Executes an instant query against VictoriaMetrics. The `query` field also supports Lucene syntax when\n`query_language` is `lucene` (or when auto-detected); Mirador translates Lucene into PromQL label selectors.\nWhen `include_definitions` is enabled (default), the response contains `definitions` sourced from the schema store\n(Weaviate) including metric and per-metric label definitions. Optional `label_keys` can limit which label keys are considered.\nWhen multiple metrics sources are configured in config.yaml (database.victoria_metrics + database.metrics_sources),\nthe server fans out the query across sources and aggregates the results. Identical series from different sources may appear as duplicates.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "promql"
                    ],
                    "description": "If `lucene`, the server translates to PromQL/MetricsQL."
                  },
                  "time": {
                    "type": "string"
                  },
                  "include_definitions": {
                    "type": "boolean",
                    "description": "Include definitions in response (default true)"
                  },
                  "label_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Restrict definitions to these label keys"
                  }
                }
              },
              "example": {
                "query_language": "lucene",
                "query": "__name__:http_requests_total AND job:api",
                "time": "2025-01-01T00:00:00Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metrics/query_range": {
      "post": {
        "summary": "MetricsQL range query (VictoriaMetrics)",
        "description": "Executes a range query. When `include_definitions` is enabled (default), the response contains\n`definitions` for metrics and per-metric label keys. Use `label_keys` to limit keys.\nWhen multiple metrics sources are configured, the server fans out the query and concatenates series across sources; datapoint counts are aggregated.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "query_language": {
                    "type": "string",
                    "enum": [
                      "lucene",
                      "promql"
                    ],
                    "description": "If `lucene`, the server translates to PromQL/MetricsQL."
                  },
                  "start": {
                    "type": "string"
                  },
                  "end": {
                    "type": "string"
                  },
                  "step": {
                    "type": "string"
                  },
                  "include_definitions": {
                    "type": "boolean",
                    "description": "Include definitions in response (default true)"
                  },
                  "label_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Restrict definitions to these label keys"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metrics/query/rollup/rate": {
      "post": {
        "summary": "MetricsQL rate rollup function",
        "description": "Calculates the per-second instant rate of increase of counter values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/rate/range": {
      "post": {
        "summary": "MetricsQL rate rollup function (range)",
        "description": "Calculates the per-second instant rate of increase of counter values over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/increase": {
      "post": {
        "summary": "MetricsQL increase rollup function",
        "description": "Calculates the increase in counter values over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Increase calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/increase/range": {
      "post": {
        "summary": "MetricsQL increase rollup function (range)",
        "description": "Calculates the increase in counter values over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Increase calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/delta": {
      "post": {
        "summary": "MetricsQL delta rollup function",
        "description": "Calculates the difference between the first and last values in the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/delta/range": {
      "post": {
        "summary": "MetricsQL delta rollup function (range)",
        "description": "Calculates the difference between the first and last values in the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/irate": {
      "post": {
        "summary": "MetricsQL irate rollup function",
        "description": "Calculates the instant rate of increase of counter values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/irate/range": {
      "post": {
        "summary": "MetricsQL irate rollup function (range)",
        "description": "Calculates the instant rate of increase of counter values over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/deriv": {
      "post": {
        "summary": "MetricsQL deriv rollup function",
        "description": "Calculates the per-second derivative of gauge values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Derivative calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/deriv/range": {
      "post": {
        "summary": "MetricsQL deriv rollup function (range)",
        "description": "Calculates the per-second derivative of gauge values over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Derivative calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/idelta": {
      "post": {
        "summary": "MetricsQL idelta rollup function",
        "description": "Calculates the instant difference between the last two values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/idelta/range": {
      "post": {
        "summary": "MetricsQL idelta rollup function (range)",
        "description": "Calculates the instant difference between the last two values over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/ideriv": {
      "post": {
        "summary": "MetricsQL ideriv rollup function",
        "description": "Calculates the instant derivative of gauge values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant derivative calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/ideriv/range": {
      "post": {
        "summary": "MetricsQL ideriv rollup function (range)",
        "description": "Calculates the instant derivative of gauge values over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant derivative calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/absent_over_time": {
      "post": {
        "summary": "MetricsQL absent_over_time rollup function",
        "description": "Returns 1 if no data points exist in the time range, otherwise returns 0",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absence detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/absent_over_time/range": {
      "post": {
        "summary": "MetricsQL absent_over_time rollup function (range)",
        "description": "Returns 1 if no data points exist in the specified time range, otherwise returns 0",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absence detection result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/avg_over_time": {
      "post": {
        "summary": "MetricsQL avg_over_time rollup function",
        "description": "Calculates the average value over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Average calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/avg_over_time/range": {
      "post": {
        "summary": "MetricsQL avg_over_time rollup function (range)",
        "description": "Calculates the average value over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Average calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/min_over_time": {
      "post": {
        "summary": "MetricsQL min_over_time rollup function",
        "description": "Calculates the minimum value over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minimum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/min_over_time/range": {
      "post": {
        "summary": "MetricsQL min_over_time rollup function (range)",
        "description": "Calculates the minimum value over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minimum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/max_over_time": {
      "post": {
        "summary": "MetricsQL max_over_time rollup function",
        "description": "Calculates the maximum value over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maximum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/max_over_time/range": {
      "post": {
        "summary": "MetricsQL max_over_time rollup function (range)",
        "description": "Calculates the maximum value over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maximum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/sum_over_time": {
      "post": {
        "summary": "MetricsQL sum_over_time rollup function",
        "description": "Calculates the sum of all values over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/sum_over_time/range": {
      "post": {
        "summary": "MetricsQL sum_over_time rollup function (range)",
        "description": "Calculates the sum of all values over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sum calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/count_over_time": {
      "post": {
        "summary": "MetricsQL count_over_time rollup function",
        "description": "Counts the number of data points over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Count calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/count_over_time/range": {
      "post": {
        "summary": "MetricsQL count_over_time rollup function (range)",
        "description": "Counts the number of data points over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Count calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/quantile_over_time": {
      "post": {
        "summary": "MetricsQL quantile_over_time rollup function",
        "description": "Calculates the quantile value over the time range (requires quantile parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantile calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/quantile_over_time/range": {
      "post": {
        "summary": "MetricsQL quantile_over_time rollup function (range)",
        "description": "Calculates the quantile value over the specified time range (requires quantile parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantile calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/stddev_over_time": {
      "post": {
        "summary": "MetricsQL stddev_over_time rollup function",
        "description": "Calculates the standard deviation over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard deviation calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/stddev_over_time/range": {
      "post": {
        "summary": "MetricsQL stddev_over_time rollup function (range)",
        "description": "Calculates the standard deviation over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard deviation calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/stdvar_over_time": {
      "post": {
        "summary": "MetricsQL stdvar_over_time rollup function",
        "description": "Calculates the standard variance over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard variance calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/stdvar_over_time/range": {
      "post": {
        "summary": "MetricsQL stdvar_over_time rollup function (range)",
        "description": "Calculates the standard variance over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard variance calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/mad_over_time": {
      "post": {
        "summary": "MetricsQL mad_over_time rollup function",
        "description": "Calculates the median absolute deviation over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MAD calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/mad_over_time/range": {
      "post": {
        "summary": "MetricsQL mad_over_time rollup function (range)",
        "description": "Calculates the median absolute deviation over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MAD calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/zscore_over_time": {
      "post": {
        "summary": "MetricsQL zscore_over_time rollup function",
        "description": "Calculates the z-score over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Z-score calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/zscore_over_time/range": {
      "post": {
        "summary": "MetricsQL zscore_over_time rollup function (range)",
        "description": "Calculates the z-score over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Z-score calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/distinct_over_time": {
      "post": {
        "summary": "MetricsQL distinct_over_time rollup function",
        "description": "Counts distinct values over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Distinct count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/distinct_over_time/range": {
      "post": {
        "summary": "MetricsQL distinct_over_time rollup function (range)",
        "description": "Counts distinct values over the specified time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Distinct count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/changes": {
      "post": {
        "summary": "MetricsQL changes rollup function",
        "description": "Counts the number of times the value changes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/changes/range": {
      "post": {
        "summary": "MetricsQL changes rollup function (range)",
        "description": "Counts the number of times the value changes over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/resets": {
      "post": {
        "summary": "MetricsQL resets rollup function",
        "description": "Counts the number of counter resets",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resets count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/rollup/resets/range": {
      "post": {
        "summary": "MetricsQL resets rollup function (range)",
        "description": "Counts the number of counter resets over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resets count result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/abs": {
      "post": {
        "summary": "MetricsQL abs transform function",
        "description": "Calculates the absolute value of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absolute value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/abs/range": {
      "post": {
        "summary": "MetricsQL abs transform function (range)",
        "description": "Calculates the absolute value of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absolute value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ceil": {
      "post": {
        "summary": "MetricsQL ceil transform function",
        "description": "Rounds each data point up to the nearest integer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ceiling result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ceil/range": {
      "post": {
        "summary": "MetricsQL ceil transform function (range)",
        "description": "Rounds each data point up to the nearest integer over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ceiling result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/floor": {
      "post": {
        "summary": "MetricsQL floor transform function",
        "description": "Rounds each data point down to the nearest integer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Floor result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/floor/range": {
      "post": {
        "summary": "MetricsQL floor transform function (range)",
        "description": "Rounds each data point down to the nearest integer over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Floor result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/round": {
      "post": {
        "summary": "MetricsQL round transform function",
        "description": "Rounds each data point to the nearest integer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Round result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/round/range": {
      "post": {
        "summary": "MetricsQL round transform function (range)",
        "description": "Rounds each data point to the nearest integer over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Round result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sqrt": {
      "post": {
        "summary": "MetricsQL sqrt transform function",
        "description": "Calculates the square root of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Square root result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sqrt/range": {
      "post": {
        "summary": "MetricsQL sqrt transform function (range)",
        "description": "Calculates the square root of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Square root result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ln": {
      "post": {
        "summary": "MetricsQL ln transform function",
        "description": "Calculates the natural logarithm of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Natural logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ln/range": {
      "post": {
        "summary": "MetricsQL ln transform function (range)",
        "description": "Calculates the natural logarithm of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Natural logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/log2": {
      "post": {
        "summary": "MetricsQL log2 transform function",
        "description": "Calculates the base-2 logarithm of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Base-2 logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/log2/range": {
      "post": {
        "summary": "MetricsQL log2 transform function (range)",
        "description": "Calculates the base-2 logarithm of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Base-2 logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/log10": {
      "post": {
        "summary": "MetricsQL log10 transform function",
        "description": "Calculates the base-10 logarithm of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Base-10 logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/log10/range": {
      "post": {
        "summary": "MetricsQL log10 transform function (range)",
        "description": "Calculates the base-10 logarithm of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Base-10 logarithm result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/exp": {
      "post": {
        "summary": "MetricsQL exp transform function",
        "description": "Calculates e^x for each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exponential result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/exp/range": {
      "post": {
        "summary": "MetricsQL exp transform function (range)",
        "description": "Calculates e^x for each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exponential result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sin": {
      "post": {
        "summary": "MetricsQL sin transform function",
        "description": "Calculates the sine of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sin/range": {
      "post": {
        "summary": "MetricsQL sin transform function (range)",
        "description": "Calculates the sine of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/cos": {
      "post": {
        "summary": "MetricsQL cos transform function",
        "description": "Calculates the cosine of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cosine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/cos/range": {
      "post": {
        "summary": "MetricsQL cos transform function (range)",
        "description": "Calculates the cosine of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cosine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/tan": {
      "post": {
        "summary": "MetricsQL tan transform function",
        "description": "Calculates the tangent of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tangent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/tan/range": {
      "post": {
        "summary": "MetricsQL tan transform function (range)",
        "description": "Calculates the tangent of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tangent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/asin": {
      "post": {
        "summary": "MetricsQL asin transform function",
        "description": "Calculates the arcsine of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arcsine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/asin/range": {
      "post": {
        "summary": "MetricsQL asin transform function (range)",
        "description": "Calculates the arcsine of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arcsine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/acos": {
      "post": {
        "summary": "MetricsQL acos transform function",
        "description": "Calculates the arccosine of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arccosine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/acos/range": {
      "post": {
        "summary": "MetricsQL acos transform function (range)",
        "description": "Calculates the arccosine of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arccosine result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/atan": {
      "post": {
        "summary": "MetricsQL atan transform function",
        "description": "Calculates the arctangent of each data point (in radians)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arctangent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/atan/range": {
      "post": {
        "summary": "MetricsQL atan transform function (range)",
        "description": "Calculates the arctangent of each data point (in radians) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Arctangent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/deg": {
      "post": {
        "summary": "MetricsQL deg transform function",
        "description": "Converts radians to degrees",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Degrees conversion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/deg/range": {
      "post": {
        "summary": "MetricsQL deg transform function (range)",
        "description": "Converts radians to degrees over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Degrees conversion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/rad": {
      "post": {
        "summary": "MetricsQL rad transform function",
        "description": "Converts degrees to radians",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Radians conversion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/rad/range": {
      "post": {
        "summary": "MetricsQL rad transform function (range)",
        "description": "Converts degrees to radians over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Radians conversion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp": {
      "post": {
        "summary": "MetricsQL clamp transform function",
        "description": "Clamps values to a specified range (requires min and max parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp/range": {
      "post": {
        "summary": "MetricsQL clamp transform function (range)",
        "description": "Clamps values to a specified range over a time range (requires min and max parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp_min": {
      "post": {
        "summary": "MetricsQL clamp_min transform function",
        "description": "Clamps values to a minimum value (requires min parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp minimum result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp_min/range": {
      "post": {
        "summary": "MetricsQL clamp_min transform function (range)",
        "description": "Clamps values to a minimum value over a time range (requires min parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp minimum result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp_max": {
      "post": {
        "summary": "MetricsQL clamp_max transform function",
        "description": "Clamps values to a maximum value (requires max parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp maximum result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/clamp_max/range": {
      "post": {
        "summary": "MetricsQL clamp_max transform function (range)",
        "description": "Clamps values to a maximum value over a time range (requires max parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clamp maximum result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/histogram_quantile": {
      "post": {
        "summary": "MetricsQL histogram_quantile transform function",
        "description": "Calculates quantiles from histogram buckets (requires quantile parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Histogram quantile result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/histogram_quantile/range": {
      "post": {
        "summary": "MetricsQL histogram_quantile transform function (range)",
        "description": "Calculates quantiles from histogram buckets over a time range (requires quantile parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Histogram quantile result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_replace": {
      "post": {
        "summary": "MetricsQL label_replace transform function",
        "description": "Replaces label values using regex (requires dst, replacement, src, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label replace result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_replace/range": {
      "post": {
        "summary": "MetricsQL label_replace transform function (range)",
        "description": "Replaces label values using regex over a time range (requires dst, replacement, src, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label replace result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_join": {
      "post": {
        "summary": "MetricsQL label_join transform function",
        "description": "Joins multiple label values into a single label (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label join result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_join/range": {
      "post": {
        "summary": "MetricsQL label_join transform function (range)",
        "description": "Joins multiple label values into a single label over a time range (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label join result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_set": {
      "post": {
        "summary": "MetricsQL label_set transform function",
        "description": "Sets a label to a fixed value (requires label, value parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label set result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_set/range": {
      "post": {
        "summary": "MetricsQL label_set transform function (range)",
        "description": "Sets a label to a fixed value over a time range (requires label, value parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label set result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_del": {
      "post": {
        "summary": "MetricsQL label_del transform function",
        "description": "Deletes specified labels (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label delete result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_del/range": {
      "post": {
        "summary": "MetricsQL label_del transform function (range)",
        "description": "Deletes specified labels over a time range (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label delete result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_keep": {
      "post": {
        "summary": "MetricsQL label_keep transform function",
        "description": "Keeps only specified labels (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label keep result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_keep/range": {
      "post": {
        "summary": "MetricsQL label_keep transform function (range)",
        "description": "Keeps only specified labels over a time range (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label keep result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_copy": {
      "post": {
        "summary": "MetricsQL label_copy transform function",
        "description": "Copies a label to a new name (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label copy result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_copy/range": {
      "post": {
        "summary": "MetricsQL label_copy transform function (range)",
        "description": "Copies a label to a new name over a time range (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label copy result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_value": {
      "post": {
        "summary": "MetricsQL label_value transform function",
        "description": "Returns the value of a label as a metric value (requires label parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_value/range": {
      "post": {
        "summary": "MetricsQL label_value transform function (range)",
        "description": "Returns the value of a label as a metric value over a time range (requires label parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_match": {
      "post": {
        "summary": "MetricsQL label_match transform function",
        "description": "Filters series where label matches regex (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label match result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_match/range": {
      "post": {
        "summary": "MetricsQL label_match transform function (range)",
        "description": "Filters series where label matches regex over a time range (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label match result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_mismatch": {
      "post": {
        "summary": "MetricsQL label_mismatch transform function",
        "description": "Filters series where label does not match regex (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label mismatch result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/label_mismatch/range": {
      "post": {
        "summary": "MetricsQL label_mismatch transform function (range)",
        "description": "Filters series where label does not match regex over a time range (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label mismatch result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sort": {
      "post": {
        "summary": "MetricsQL sort transform function",
        "description": "Sorts series by values in ascending order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sort result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sort/range": {
      "post": {
        "summary": "MetricsQL sort transform function (range)",
        "description": "Sorts series by values in ascending order over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sort result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sort_desc": {
      "post": {
        "summary": "MetricsQL sort_desc transform function",
        "description": "Sorts series by values in descending order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sort descending result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/sort_desc/range": {
      "post": {
        "summary": "MetricsQL sort_desc transform function (range)",
        "description": "Sorts series by values in descending order over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sort descending result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/reverse": {
      "post": {
        "summary": "MetricsQL reverse transform function",
        "description": "Reverses the order of series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reverse result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/reverse/range": {
      "post": {
        "summary": "MetricsQL reverse transform function (range)",
        "description": "Reverses the order of series over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reverse result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/topk": {
      "post": {
        "summary": "MetricsQL topk transform function",
        "description": "Returns the top k series by value (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Top k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/topk/range": {
      "post": {
        "summary": "MetricsQL topk transform function (range)",
        "description": "Returns the top k series by value over a time range (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Top k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/bottomk": {
      "post": {
        "summary": "MetricsQL bottomk transform function",
        "description": "Returns the bottom k series by value (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bottom k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/bottomk/range": {
      "post": {
        "summary": "MetricsQL bottomk transform function (range)",
        "description": "Returns the bottom k series by value over a time range (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bottom k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/limitk": {
      "post": {
        "summary": "MetricsQL limitk transform function",
        "description": "Limits the number of series returned (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Limit k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/limitk/range": {
      "post": {
        "summary": "MetricsQL limitk transform function (range)",
        "description": "Limits the number of series returned over a time range (requires k parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Limit k result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/keep_last_value": {
      "post": {
        "summary": "MetricsQL keep_last_value transform function",
        "description": "Fills gaps with the last known value",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keep last value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/keep_last_value/range": {
      "post": {
        "summary": "MetricsQL keep_last_value transform function (range)",
        "description": "Fills gaps with the last known value over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keep last value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/keep_next_value": {
      "post": {
        "summary": "MetricsQL keep_next_value transform function",
        "description": "Fills gaps with the next known value",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keep next value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/keep_next_value/range": {
      "post": {
        "summary": "MetricsQL keep_next_value transform function (range)",
        "description": "Fills gaps with the next known value over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keep next value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/interpolate": {
      "post": {
        "summary": "MetricsQL interpolate transform function",
        "description": "Interpolates missing values using linear interpolation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interpolate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/interpolate/range": {
      "post": {
        "summary": "MetricsQL interpolate transform function (range)",
        "description": "Interpolates missing values using linear interpolation over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interpolate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/union": {
      "post": {
        "summary": "MetricsQL union transform function",
        "description": "Returns the union of multiple series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Union result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/union/range": {
      "post": {
        "summary": "MetricsQL union transform function (range)",
        "description": "Returns the union of multiple series over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Union result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/absent": {
      "post": {
        "summary": "MetricsQL absent transform function",
        "description": "Returns 1 if series is absent, otherwise returns nothing",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/absent/range": {
      "post": {
        "summary": "MetricsQL absent transform function (range)",
        "description": "Returns 1 if series is absent over a time range, otherwise returns nothing",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Absent result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/scalar": {
      "post": {
        "summary": "MetricsQL scalar transform function",
        "description": "Converts a single value to a scalar",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scalar result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/scalar/range": {
      "post": {
        "summary": "MetricsQL scalar transform function (range)",
        "description": "Converts a single value to a scalar over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scalar result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/vector": {
      "post": {
        "summary": "MetricsQL vector transform function",
        "description": "Converts a scalar to a vector",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/vector/range": {
      "post": {
        "summary": "MetricsQL vector transform function (range)",
        "description": "Converts a scalar to a vector over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vector result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/time": {
      "post": {
        "summary": "MetricsQL time transform function",
        "description": "Returns the current time as a scalar",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/time/range": {
      "post": {
        "summary": "MetricsQL time transform function (range)",
        "description": "Returns the current time as a scalar over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/hour": {
      "post": {
        "summary": "MetricsQL hour transform function",
        "description": "Returns the hour of the timestamp (0-23)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hour result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/hour/range": {
      "post": {
        "summary": "MetricsQL hour transform function (range)",
        "description": "Returns the hour of the timestamp (0-23) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hour result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/minute": {
      "post": {
        "summary": "MetricsQL minute transform function",
        "description": "Returns the minute of the timestamp (0-59)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minute result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/minute/range": {
      "post": {
        "summary": "MetricsQL minute transform function (range)",
        "description": "Returns the minute of the timestamp (0-59) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minute result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/month": {
      "post": {
        "summary": "MetricsQL month transform function",
        "description": "Returns the month of the timestamp (1-12)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/month/range": {
      "post": {
        "summary": "MetricsQL month transform function (range)",
        "description": "Returns the month of the timestamp (1-12) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/year": {
      "post": {
        "summary": "MetricsQL year transform function",
        "description": "Returns the year of the timestamp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Year result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/year/range": {
      "post": {
        "summary": "MetricsQL year transform function (range)",
        "description": "Returns the year of the timestamp over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Year result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/day_of_month": {
      "post": {
        "summary": "MetricsQL day_of_month transform function",
        "description": "Returns the day of the month (1-31)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Day of month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/day_of_month/range": {
      "post": {
        "summary": "MetricsQL day_of_month transform function (range)",
        "description": "Returns the day of the month (1-31) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Day of month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/day_of_week": {
      "post": {
        "summary": "MetricsQL day_of_week transform function",
        "description": "Returns the day of the week (0-6, Sunday=0)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Day of week result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/day_of_week/range": {
      "post": {
        "summary": "MetricsQL day_of_week transform function (range)",
        "description": "Returns the day of the week (0-6, Sunday=0) over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Day of week result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/days_in_month": {
      "post": {
        "summary": "MetricsQL days_in_month transform function",
        "description": "Returns the number of days in the month",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Days in month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/days_in_month/range": {
      "post": {
        "summary": "MetricsQL days_in_month transform function (range)",
        "description": "Returns the number of days in the month over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Days in month result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/timestamp": {
      "post": {
        "summary": "MetricsQL timestamp transform function",
        "description": "Returns the timestamp of each data point",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timestamp result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/timestamp/range": {
      "post": {
        "summary": "MetricsQL timestamp transform function (range)",
        "description": "Returns the timestamp of each data point over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timestamp result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/start": {
      "post": {
        "summary": "MetricsQL start transform function",
        "description": "Returns the start time of the query range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Start time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/start/range": {
      "post": {
        "summary": "MetricsQL start transform function (range)",
        "description": "Returns the start time of the query range over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Start time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/end": {
      "post": {
        "summary": "MetricsQL end transform function",
        "description": "Returns the end time of the query range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "End time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/end/range": {
      "post": {
        "summary": "MetricsQL end transform function (range)",
        "description": "Returns the end time of the query range over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "End time result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/step": {
      "post": {
        "summary": "MetricsQL step transform function",
        "description": "Returns the step size of the query",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Step size result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/step/range": {
      "post": {
        "summary": "MetricsQL step transform function (range)",
        "description": "Returns the step size of the query over a time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Step size result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/offset": {
      "post": {
        "summary": "MetricsQL offset transform function",
        "description": "Applies a time offset to the series (requires offset parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offset result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/offset/range": {
      "post": {
        "summary": "MetricsQL offset transform function (range)",
        "description": "Applies a time offset to the series over a time range (requires offset parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offset result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/increase_pure": {
      "post": {
        "summary": "MetricsQL increase_pure transform function",
        "description": "Calculates pure increase (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure increase result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/increase_pure/range": {
      "post": {
        "summary": "MetricsQL increase_pure transform function (range)",
        "description": "Calculates pure increase over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure increase result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/rate_pure": {
      "post": {
        "summary": "MetricsQL rate_pure transform function",
        "description": "Calculates pure rate (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure rate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/rate_pure/range": {
      "post": {
        "summary": "MetricsQL rate_pure transform function (range)",
        "description": "Calculates pure rate over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure rate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/delta_pure": {
      "post": {
        "summary": "MetricsQL delta_pure transform function",
        "description": "Calculates pure delta (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure delta result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/delta_pure/range": {
      "post": {
        "summary": "MetricsQL delta_pure transform function (range)",
        "description": "Calculates pure delta over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure delta result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/irate_pure": {
      "post": {
        "summary": "MetricsQL irate_pure transform function",
        "description": "Calculates pure instant rate (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant rate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/irate_pure/range": {
      "post": {
        "summary": "MetricsQL irate_pure transform function (range)",
        "description": "Calculates pure instant rate over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant rate result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/deriv_pure": {
      "post": {
        "summary": "MetricsQL deriv_pure transform function",
        "description": "Calculates pure derivative (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure derivative result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/deriv_pure/range": {
      "post": {
        "summary": "MetricsQL deriv_pure transform function (range)",
        "description": "Calculates pure derivative over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure derivative result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/idelta_pure": {
      "post": {
        "summary": "MetricsQL idelta_pure transform function",
        "description": "Calculates pure instant delta (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant delta result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/idelta_pure/range": {
      "post": {
        "summary": "MetricsQL idelta_pure transform function (range)",
        "description": "Calculates pure instant delta over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant delta result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ideriv_pure": {
      "post": {
        "summary": "MetricsQL ideriv_pure transform function",
        "description": "Calculates pure instant derivative (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant derivative result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/transform/ideriv_pure/range": {
      "post": {
        "summary": "MetricsQL ideriv_pure transform function (range)",
        "description": "Calculates pure instant derivative over a time range (handles counter resets)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pure instant derivative result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_replace": {
      "post": {
        "summary": "MetricsQL label_replace label function",
        "description": "Replaces label values using regex (requires dst, replacement, src, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label replace result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_replace/range": {
      "post": {
        "summary": "MetricsQL label_replace label function (range)",
        "description": "Replaces label values using regex over a time range (requires dst, replacement, src, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label replace result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_join": {
      "post": {
        "summary": "MetricsQL label_join label function",
        "description": "Joins multiple label values into a single label (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label join result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_join/range": {
      "post": {
        "summary": "MetricsQL label_join label function (range)",
        "description": "Joins multiple label values into a single label over a time range (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label join result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_set": {
      "post": {
        "summary": "MetricsQL label_set label function",
        "description": "Sets a label to a fixed value (requires label, value parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label set result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_set/range": {
      "post": {
        "summary": "MetricsQL label_set label function (range)",
        "description": "Sets a label to a fixed value over a time range (requires label, value parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label set result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_del": {
      "post": {
        "summary": "MetricsQL label_del label function",
        "description": "Deletes specified labels (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label delete result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_del/range": {
      "post": {
        "summary": "MetricsQL label_del label function (range)",
        "description": "Deletes specified labels over a time range (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label delete result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_keep": {
      "post": {
        "summary": "MetricsQL label_keep label function",
        "description": "Keeps only specified labels (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label keep result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_keep/range": {
      "post": {
        "summary": "MetricsQL label_keep label function (range)",
        "description": "Keeps only specified labels over a time range (requires label parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label keep result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_copy": {
      "post": {
        "summary": "MetricsQL label_copy label function",
        "description": "Copies a label to a new name (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label copy result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_copy/range": {
      "post": {
        "summary": "MetricsQL label_copy label function (range)",
        "description": "Copies a label to a new name over a time range (requires dst, src parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label copy result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_value": {
      "post": {
        "summary": "MetricsQL label_value label function",
        "description": "Returns the value of a label as a metric value (requires label parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_value/range": {
      "post": {
        "summary": "MetricsQL label_value label function (range)",
        "description": "Returns the value of a label as a metric value over a time range (requires label parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label value result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_match": {
      "post": {
        "summary": "MetricsQL label_match label function",
        "description": "Filters series where label matches regex (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label match result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_match/range": {
      "post": {
        "summary": "MetricsQL label_match label function (range)",
        "description": "Filters series where label matches regex over a time range (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label match result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_mismatch": {
      "post": {
        "summary": "MetricsQL label_mismatch label function",
        "description": "Filters series where label does not match regex (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label mismatch result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/label/label_mismatch/range": {
      "post": {
        "summary": "MetricsQL label_mismatch label function (range)",
        "description": "Filters series where label does not match regex over a time range (requires label, regex parameters)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Label mismatch result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/sum": {
      "post": {
        "summary": "MetricsQL sum aggregate function",
        "description": "Calculates the sum of all values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sum aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/avg": {
      "post": {
        "summary": "MetricsQL avg aggregate function",
        "description": "Calculates the average of all values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Average aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/count": {
      "post": {
        "summary": "MetricsQL count aggregate function",
        "description": "Counts the number of time series in the input",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Count aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/min": {
      "post": {
        "summary": "MetricsQL min aggregate function",
        "description": "Returns the minimum value across all time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Minimum aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/max": {
      "post": {
        "summary": "MetricsQL max aggregate function",
        "description": "Returns the maximum value across all time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maximum aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/median": {
      "post": {
        "summary": "MetricsQL median aggregate function",
        "description": "Calculates the median value across all time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Median aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/quantile": {
      "post": {
        "summary": "MetricsQL quantile aggregate function",
        "description": "Calculates the quantile value across all time series (requires 'quantile' parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantile aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/topk": {
      "post": {
        "summary": "MetricsQL topk aggregate function",
        "description": "Returns the top k time series by value (requires 'k' parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Top k aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/bottomk": {
      "post": {
        "summary": "MetricsQL bottomk aggregate function",
        "description": "Returns the bottom k time series by value (requires 'k' parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bottom k aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/distinct": {
      "post": {
        "summary": "MetricsQL distinct aggregate function",
        "description": "Returns distinct values from the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Distinct values result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/histogram": {
      "post": {
        "summary": "MetricsQL histogram aggregate function",
        "description": "Creates a histogram from the input time series values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Histogram aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/outliers_iqr": {
      "post": {
        "summary": "MetricsQL outliers_iqr aggregate function",
        "description": "Detects outliers using the interquartile range method",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Outliers detection result using IQR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/outliersk": {
      "post": {
        "summary": "MetricsQL outliersk aggregate function",
        "description": "Detects outliers using the k-sigma method (requires 'k' parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Outliers detection result using k-sigma",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/stddev": {
      "post": {
        "summary": "MetricsQL stddev aggregate function",
        "description": "Calculates the standard deviation of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard deviation aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/stdvar": {
      "post": {
        "summary": "MetricsQL stdvar aggregate function",
        "description": "Calculates the standard variance of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard variance aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/mad": {
      "post": {
        "summary": "MetricsQL mad aggregate function",
        "description": "Calculates the median absolute deviation of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Median absolute deviation aggregation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/zscore": {
      "post": {
        "summary": "MetricsQL zscore aggregate function",
        "description": "Calculates z-scores for values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Z-score calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/mode": {
      "post": {
        "summary": "MetricsQL mode aggregate function",
        "description": "Returns the most frequent value in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mode calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/skewness": {
      "post": {
        "summary": "MetricsQL skewness aggregate function",
        "description": "Calculates the skewness of the distribution of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Skewness calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/kurtosis": {
      "post": {
        "summary": "MetricsQL kurtosis aggregate function",
        "description": "Calculates the kurtosis of the distribution of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Kurtosis calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/cov": {
      "post": {
        "summary": "MetricsQL cov aggregate function",
        "description": "Calculates the covariance between two time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Covariance calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/corr": {
      "post": {
        "summary": "MetricsQL corr aggregate function",
        "description": "Calculates the correlation coefficient between two time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Correlation calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/entropy": {
      "post": {
        "summary": "MetricsQL entropy aggregate function",
        "description": "Calculates the entropy of the distribution of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Entropy calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/range": {
      "post": {
        "summary": "MetricsQL range aggregate function",
        "description": "Calculates the range (max - min) of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Range calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/iqr": {
      "post": {
        "summary": "MetricsQL iqr aggregate function",
        "description": "Calculates the interquartile range (Q3 - Q1) of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Interquartile range calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/percentile": {
      "post": {
        "summary": "MetricsQL percentile aggregate function",
        "description": "Calculates a specific percentile of values in the input time series (requires 'p' parameter)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Percentile calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/geomean": {
      "post": {
        "summary": "MetricsQL geomean aggregate function",
        "description": "Calculates the geometric mean of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Geometric mean calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/harmean": {
      "post": {
        "summary": "MetricsQL harmean aggregate function",
        "description": "Calculates the harmonic mean of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Harmonic mean calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/trimean": {
      "post": {
        "summary": "MetricsQL trimean aggregate function",
        "description": "Calculates the trimean (average of median and quartiles) of values in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trimean calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/mode_multi": {
      "post": {
        "summary": "MetricsQL mode_multi aggregate function",
        "description": "Returns all modes (most frequent values) in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Multiple modes calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/count_values": {
      "post": {
        "summary": "MetricsQL count_values aggregate function",
        "description": "Counts occurrences of each distinct value in the input time series",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Value counts result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/increase": {
      "post": {
        "summary": "MetricsQL increase aggregate function",
        "description": "Calculates the increase in counter values over the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Increase calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/rate": {
      "post": {
        "summary": "MetricsQL rate aggregate function",
        "description": "Calculates the per-second rate of increase of counter values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/irate": {
      "post": {
        "summary": "MetricsQL irate aggregate function",
        "description": "Calculates the instant rate of increase of counter values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant rate calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/delta": {
      "post": {
        "summary": "MetricsQL delta aggregate function",
        "description": "Calculates the difference between the first and last values in the time range",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/query/aggregate/idelta": {
      "post": {
        "summary": "MetricsQL idelta aggregate function",
        "description": "Calculates the instant difference between the last two values",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQLFunctionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Instant delta calculation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsQLQueryResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}