openapi: 3.0.3
info:
  title: MIRADOR-CORE API
  description: Advanced Observability Platform REST API
  version: 2.1.3
  contact:
    name: Platformbuilds Team
    email: rv@platformbuilds.org

servers:
  - url: "{scheme}://{host}{basePath}"
    description: Configurable server (edit variables in Swagger UI)
    variables:
      scheme:
        enum: [http, https]
        default: https
      host:
        default: localhost:8080
        description: Hostname:port of mirador-core
      basePath:
        default: /api/v1
        description: Base path for API routes (use "/" for root-only endpoints)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Session token from LDAP/AD or SSO

  schemas:
    SystemFracture:
      type: object
      properties:
        id:
          type: string
        component:
          type: string
        fracture_type:
          type: string
          enum: [fatigue, overload, degradation]
        time_to_fracture:
          type: integer
          description: Seconds until predicted fracture
        severity:
          type: string
          enum: [high, medium, low]
        probability:
          type: number
          minimum: 0
          maximum: 1
        confidence:
          type: number
          minimum: 0
          maximum: 1

    CorrelationResult:
      type: object
      properties:
        correlation_id:
          type: string
        root_cause:
          type: string
        confidence:
          type: number
        red_anchors:
          type: array
          items:
            $ref: '#/components/schemas/RedAnchor'

    RedAnchor:
      type: object
      description: Anomaly score pattern for RCA analysis
      properties:
        service:
          type: string
        metric:
          type: string
        anomaly_score:
          type: number
        threshold:
          type: number
        timestamp:
          type: string
          format: date-time
        data_type:
          type: string
          enum: [metrics, logs, traces]

    FlameNode:
      type: object
      properties:
        name: { type: string }
        value: { type: integer, description: Duration in ms }
        spanId: { type: string }
        service: { type: string }
        children:
          type: array
          items:
            $ref: '#/components/schemas/FlameNode'

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Returns basic service health
      responses:
        '200':
          description: Healthy
  /ready:
    get:
      summary: Readiness check
      description: Checks backends (Victoria*, engines) and returns readiness
      responses:
        '200': { description: Ready }
        '503': { description: Not ready }
  /predict/analyze:
    post:
      summary: Analyze system fractures
      description: Predict possible fracture/fatigue in running services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  type: string
                time_range:
                  type: string
                model_types:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Fracture analysis results
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fractures:
                        type: array
                        items:
                          $ref: '#/components/schemas/SystemFracture'

  /rca/investigate:
    post:
      summary: Start RCA investigation
      description: Correlate incidents using red anchors pattern across metrics, logs, traces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                incident_id:
                  type: string
                symptoms:
                  type: array
                  items:
                    type: string
                time_range:
                  type: object
                  properties:
                    start:
                      type: string
                      format: date-time
                    end:
                      type: string
                      format: date-time
      responses:
        '200':
          description: RCA correlation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorrelationResult'
  /predict/health:
    get:
      summary: Predict Engine health
      responses:
        '200': { description: Healthy }
  /predict/fractures:
    get:
      summary: List predicted fractures
      parameters:
        - in: query
          name: time_range
          schema: { type: string }
        - in: query
          name: min_prob
          schema: { type: number }
      responses:
        '200': { description: OK }
  /predict/models:
    get:
      summary: List active prediction models
      responses:
        '200': { description: OK }

  # Traces Schema (Services & Operations)
  /schema/traces/services:
    post:
      summary: Upsert trace service definition
      description: Create or update a trace service definition and record a new version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                service: { type: string }
                purpose: { type: string }
                owner: { type: string }
                tags: { type: object }
                author: { type: string }
              required: [service]
      responses:
        '200': { description: OK }
  /schema/traces/services/bulk:
    post:
      summary: Bulk upsert trace services via CSV
      description: |
        Upload a CSV to create/update trace service definitions.
        CSV columns (header required; strict header mode):
        - tenant_id (optional; defaults to request tenant)
        - service (required)
        - purpose, owner, tags_json, author
        Security: 5MiB payload limit, MIME allowlist with sniffing, UTF‑8 validation, CSV injection mitigation, no disk writes.
        Limits: header strict mode (reject unknown columns), 10k row cap, per‑tenant daily quota (429 on exceed).
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '429': { description: Too Many Requests }
  /schema/traces/services/{service}:
    get:
      summary: Get current trace service definition
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /schema/traces/services/{service}/versions:
    get:
      summary: List versions for a trace service
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /schema/traces/services/{service}/versions/{version}:
    get:
      summary: Get a specific version of a trace service definition
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
        - in: path
          name: version
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /schema/traces/operations:
    post:
      summary: Upsert trace operation definition
      description: Create or update a trace operation definition and record a new version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId: { type: string }
                service: { type: string }
                operation: { type: string }
                purpose: { type: string }
                owner: { type: string }
                tags: { type: object }
                author: { type: string }
              required: [service, operation]
      responses:
        '200': { description: OK }
  /schema/traces/operations/bulk:
    post:
      summary: Bulk upsert trace operations via CSV
      description: |
        Upload a CSV to create/update trace operation definitions. Operations are scoped per service; rows referencing undefined services are rejected.
        CSV columns (header required; strict header mode):
        - tenant_id (optional; defaults to request tenant)
        - service (required)
        - operation (required)
        - purpose, owner, tags_json, author
        Security: 5MiB payload limit, MIME allowlist with sniffing, UTF‑8 validation, CSV injection mitigation, no disk writes.
        Limits: header strict mode (reject unknown columns), 10k row cap, per‑tenant daily quota (429 on exceed).
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '429': { description: Too Many Requests }
  /schema/traces/services/{service}/operations/{operation}:
    get:
      summary: Get current trace operation definition
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
        - in: path
          name: operation
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not found }
  /schema/traces/services/{service}/operations/{operation}/versions:
    get:
      summary: List versions for a trace operation
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
        - in: path
          name: operation
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /schema/traces/services/{service}/operations/{operation}/versions/{version}:
    get:
      summary: Get a specific version of a trace operation definition
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
        - in: path
          name: operation
          required: true
          schema: { type: string }
        - in: path
          name: version
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '404': { description: Not found }

  /schema/metrics:
    post:
      summary: Upsert metric definition
      description: Create or update a metric definition and record a new version.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [metric]
              properties:
                tenantId: { type: string }
                metric: { type: string }
                description: { type: string }
                owner: { type: string }
                tags: { type: object, additionalProperties: true }
                author: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
  /schema/metrics/bulk:
    post:
      summary: Bulk upsert metric and label definitions (CSV)
      description: |
        Upload a CSV to create/update metric and label definitions.
        Security: payload limited to 5MiB, MIME allowlist, UTF‑8 validation, and CSV injection mitigations.

        Columns (header required):

        - tenant_id (optional; defaults to authenticated tenant)
        - metric (required)
        - description
        - owner
        - tags_json (JSON object)
        - label
        - label_type
        - label_required (true/false/1/0/yes/no)
        - label_allowed_json (JSON object)
        - label_description
        - author

        Note: Use the sample endpoint below to generate a pre-filled template.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
  /schema/metrics/bulk/sample:
    get:
      summary: Download sample CSV template
      description: |
        Generates a CSV with header and rows per metric/label to guide users.
        - If `metrics` is omitted, the server enumerates all metric names (via `__name__`) and includes a row per discovered label.
        - If `metrics` is provided (comma-separated), only those metrics are included.
      parameters:
        - in: query
          name: metrics
          required: false
          schema: { type: string }
          description: Comma-separated metric names to include in the sample
      responses:
        '200':
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                format: binary
  /schema/metrics/{metric}:
    get:
      summary: Get metric definition
      parameters:
        - in: path
          name: metric
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }

  /schema/metrics/{metric}/versions:
    get:
      summary: List metric definition versions
      parameters:
        - in: path
          name: metric
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        version: { type: integer }
                        author: { type: string }
                        created_at: { type: string, format: date-time }

  /schema/metrics/{metric}/versions/{version}:
    get:
      summary: Get specific metric definition version
      parameters:
        - in: path
          name: metric
          required: true
          schema: { type: string }
        - in: path
          name: version
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
        '404': { description: Not Found }

  /schema/logs/fields:
    post:
      summary: Upsert log field definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [field]
              properties:
                tenantId: { type: string }
                field: { type: string }
                type: { type: string }
                description: { type: string }
                tags: { type: object, additionalProperties: true }
                examples: { type: object, additionalProperties: true }
                author: { type: string }
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
  /schema/logs/fields/bulk:
    post:
      summary: Bulk upsert log field definitions (CSV)
      description: |
        Upload a CSV to create/update log field definitions.
        Security: 5MiB payload limit, MIME allowlist, UTF‑8 validation, CSV injection mitigation, daily per‑tenant quota.

        Columns (header required):
        - tenant_id (optional)
        - field (required)
        - type
        - description
        - tags_json (JSON object)
        - examples_json (JSON object)
        - author
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '429': { description: Too Many Requests }
  /schema/logs/fields/bulk/sample:
    get:
      summary: Download sample CSV template for log fields
      description: Generates a CSV with header and one row per discovered log field.
      responses:
        '200':
          description: CSV
          content:
            text/csv:
              schema:
                type: string
                format: binary
  /schema/logs/fields/{field}:
    get:
      summary: Get log field definition
      parameters:
        - in: path
          name: field
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }

  /schema/logs/fields/{field}/versions:
    get:
      summary: List log field definition versions
      parameters:
        - in: path
          name: field
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        version: { type: integer }
                        author: { type: string }
                        created_at: { type: string, format: date-time }

  /schema/logs/fields/{field}/versions/{version}:
    get:
      summary: Get specific log field definition version
      parameters:
        - in: path
          name: field
          required: true
          schema: { type: string }
        - in: path
          name: version
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
        '404': { description: Not Found }

  /rca/correlations:
    get:
      summary: Get active correlations
      responses:
        '200': { description: OK }
  /rca/patterns:
    get:
      summary: Get failure patterns
      responses:
        '200': { description: OK }
  /rca/store:
    post:
      summary: Store correlation event
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }

  /query:
    post:
      summary: MetricsQL instant query (VictoriaMetrics)
      description: |
        Executes an instant query against VictoriaMetrics. When `include_definitions` is enabled (default),
        the response contains `definitions` sourced from the schema store (Weaviate) including metric and
        per-metric label definitions. Optional `label_keys` can limit which label keys are considered.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                time: { type: string }
                include_definitions: { type: boolean, description: Include definitions in response (default true) }
                label_keys:
                  type: array
                  items: { type: string }
                  description: Restrict definitions to these label keys
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: success
                data:
                  resultType: vector
                  result:
                    - metric:
                        __name__: http_requests_total
                        job: api
                        instance: pod-1
                      value: [1690003600, "1"]
                metadata:
                  executionTime: 12
                  seriesCount: 1
                  cached: false
                  timestamp: 2025-09-08T10:00:00Z
                definitions:
                  metrics:
                    http_requests_total:
                      tenantId: t1
                      metric: http_requests_total
                      description: Total number of HTTP requests
                      owner: team-observability
                      tags: { domain: web }
                  labels:
                    http_requests_total:
                      instance:
                        tenantId: t1
                        metric: http_requests_total
                        label: instance
                        type: string
                        required: false
                        description: The pod or host instance
                      job:
                        definition: No definition provided. Use /api/v1/schema/metrics to add label definition.
  /query_range:
    post:
      summary: MetricsQL range query (VictoriaMetrics)
      description: |
        Executes a range query. When `include_definitions` is enabled (default), the response contains
        `definitions` for metrics and per-metric label keys. Use `label_keys` to limit keys.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                start: { type: string }
                end: { type: string }
                step: { type: string }
                include_definitions: { type: boolean, description: Include definitions in response (default true) }
                label_keys:
                  type: array
                  items: { type: string }
                  description: Restrict definitions to these label keys
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: success
                data:
                  resultType: matrix
                  result:
                    - metric:
                        __name__: http_requests_total
                        job: api
                        instance: pod-1
                      values: [[1690000000,"1"],[1690000300,"2"]]
                metadata:
                  executionTime: 18
                  dataPoints: 2
                  timeRange: 1690000000 to 1690003600
                  step: 30
                definitions:
                  metrics:
                    http_requests_total:
                      description: Total number of HTTP requests
                  labels:
                    http_requests_total:
                      instance:
                        type: string
                        required: false
  /series:
    get:
      summary: Series listing
      parameters:
        - in: query
          name: match
          schema: { type: array, items: { type: string } }
          style: form
          explode: true
      responses:
        '200': { description: OK }
  /labels:
    get:
      summary: Labels listing
      responses:
        '200': { description: OK }
  /metrics/names:
    get:
      summary: List metric names
      description: Returns values of the special label `__name__` from VictoriaMetrics.
      parameters:
        - in: query
          name: start
          schema: { type: string }
          description: Start time (RFC3339 or unix seconds)
        - in: query
          name: end
          schema: { type: string }
          description: End time (RFC3339 or unix seconds)
        - in: query
          name: match[]
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
          description: Optional label matchers
      responses:
        '200': { description: OK }
  /label/{name}/values:
    get:
      summary: Label values
      parameters:
        - in: path
          name: name
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /logs/query:
    post:
      summary: LogsQL query (VictoriaLogs)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: 'LogsQL expression (e.g., `{service.name="telemetrygen"} AND severity="Info" AND _msg~"message"`)'
                start:
                  type: integer
                  format: int64
                  description: Start time in milliseconds since epoch
                end:
                  type: integer
                  format: int64
                  description: End time in milliseconds since epoch
                limit:
                  type: integer
                  description: Max rows to return (default 1000)
                tenantId:
                  type: string
                  description: Optional tenant override
            example:
              query: '{service.name="telemetrygen"} AND severity="Info" AND _msg~"message"'
              start: 1694009100000
              end: 1694009700000
              limit: 200
      responses:
        '200': { description: OK }
  /logs/streams:
    get:
      summary: Log streams
      responses:
        '200': { description: OK }
  /logs/fields:
    get:
      summary: Log fields
      description: Returns only the union of field names derived from a hardcoded query over the last 10 minutes. Response contains only the fields array.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      fields:
                        type: array
                        items: { type: string }
  /logs/export:
    post:
      summary: Export logs (streaming)
      description: Streams a file attachment. Defaults to CSV when format is omitted. May convert JSON/NDJSON to CSV on the fly for compatibility.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                start: { type: integer, format: int64 }
                end: { type: integer, format: int64 }
                limit: { type: integer }
                format: { type: string, enum: [csv, json] }
      responses:
        '200':
          description: File stream
          content:
            text/csv:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
  /logs/store:
    post:
      summary: Store JSON event to logs
      responses:
        '200': { description: OK }
  /logs/histogram:
    get:
      summary: Histogram (D3)
      responses:
        '200': { description: OK }
  /logs/facets:
    get:
      summary: Facets (D3)
      responses:
        '200': { description: OK }
  /logs/search:
    post:
      summary: Search logs (D3)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: 'LogsQL expression (e.g., "_time:5m service=web")'
                start:
                  type: integer
                  format: int64
                  description: Start time in ms since epoch
                end:
                  type: integer
                  format: int64
                  description: End time in ms since epoch
                limit:
                  type: integer
                  description: Rows per page (default 1000, max 10000)
                page_after:
                  type: object
                  properties:
                    ts:
                      type: integer
                      format: int64
                      description: Cursor timestamp (ms)
                    offset:
                      type: integer
                      description: Offset for same-ms rows
                tenantId:
                  type: string
                  description: Optional tenant override
            example:
              query: "_time:15m level=error"
              limit: 200
      responses:
        '200': { description: OK }
  /logs/tail:
    get:
      summary: Tail logs (WebSocket)
      description: |
        Upgrades to a WebSocket connection and streams log rows as JSON frames.
        Note: Swagger "Try it out" sends a normal HTTP request and will not work here.
        Use a WebSocket client, for example:

        - wscat: `wscat -c ws://localhost:8080/api/v1/logs/tail?query=_time:5m&sampling=10`
        - websocat: `websocat -n ws://localhost:8080/api/v1/logs/tail?query=_time:5m`
        - Browser console: `new WebSocket("ws://localhost:8080/api/v1/logs/tail?query=_time:5m")`

        Query parameters:
        - `query`: LogsQL expression (e.g., `_time:5m`)
        - `since`: Start time in milliseconds since epoch (defaults to last 5 minutes)
        - `sampling`: Send every Nth row (integer, default 1)
        - `tenantId`: Optional tenant override

      parameters:
        - in: query
          name: query
          schema: { type: string }
          description: LogsQL expression (e.g., `_time:5m`)
        - in: query
          name: since
          schema: { type: integer, format: int64 }
          description: Start timestamp in ms (defaults to now-5m)
        - in: query
          name: sampling
          schema: { type: integer, minimum: 1 }
          description: Downsample by sending every Nth row (default 1)
        - in: query
          name: tenantId
          schema: { type: string }
          description: Optional tenant override for the request
      responses:
        '101':
          description: Switching Protocols (WebSocket upgrade successful)
        '426':
          description: Upgrade Required — endpoint must be called via WebSocket (not HTTP)

  /traces/services:
    get:
      summary: List services (VictoriaTraces/Jaeger)
      responses:
        '200': { description: OK }
  /traces/services/{service}/operations:
    get:
      summary: List operations for a service
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /traces/{traceId}:
    get:
      summary: Get trace by ID
      parameters:
        - in: path
          name: traceId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
  /traces/{traceId}/flamegraph:
    get:
      summary: Flame graph tree for a trace (D3)
      description: Returns a hierarchical structure suitable for d3-flame-graph built from the Jaeger trace spans using CHILD_OF references.
      parameters:
        - in: path
          name: traceId
          required: true
          schema: { type: string }
        - in: query
          name: mode
          schema: { type: string, enum: [duration, self] }
          description: Node sizing mode. duration = total span duration; self = duration minus children durations (approximate).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  data:
                    type: object
                    properties:
                      name: { type: string }
                      value: { type: integer }
                      children:
                        type: array
                        items: { $ref: '#/components/schemas/FlameNode' }

  /traces/flamegraph/search:
    post:
      summary: Aggregate flame graph over a traces search (D3)
      description: Searches VictoriaTraces (Jaeger) and merges returned traces into a single flame graph tree. Useful for service-level flame graphs over a time window.
      parameters:
        - in: query
          name: mode
          schema: { type: string, enum: [duration, self] }
          description: Node sizing mode. duration = total span duration; self = duration minus children durations (approximate).
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  data: { $ref: '#/components/schemas/FlameNode' }

  /traces/search:
    post:
      summary: Search traces
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }

  /config/datasources:
    get:
      summary: Get data sources
      responses:
        '200': { description: OK }
    post:
      summary: Add data source
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }
  /config/user-settings:
    get:
      summary: Get user settings
      responses:
        '200': { description: OK }
    put:
      summary: Update user settings
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }
  /config/integrations:
    get:
      summary: Get integrations config
      responses:
        '200': { description: OK }

  /sessions/active:
    get:
      summary: Get active sessions (current user)
      responses:
        '200': { description: OK }
  /sessions/invalidate:
    post:
      summary: Invalidate a session
      requestBody:
        required: false
      responses:
        '200': { description: OK }
  /sessions/user/{userId}:
    get:
      summary: Get sessions for a user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /rbac/roles:
    get:
      summary: List roles
      responses:
        '200': { description: OK }
    post:
      summary: Create role
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }
  /rbac/users/{userId}/roles:
    put:
      summary: Assign user roles
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        '200': { description: OK }

  /ws/metrics:
    get:
      summary: Metrics stream (WebSocket)
      responses:
        '101': { description: Switching Protocols }
  /ws/alerts:
    get:
      summary: Alerts stream (WebSocket)
      responses:
        '101': { description: Switching Protocols }
  /ws/predictions:
    get:
      summary: Predictions stream (WebSocket)
      responses:
        '101': { description: Switching Protocols }

# [Cleaned] Duplicate components + misplaced path items were removed here.
