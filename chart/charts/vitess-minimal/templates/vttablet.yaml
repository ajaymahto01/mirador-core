{{- range $idx, $shard := .Values.topology.shards }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-primary
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
    app.kubernetes.io/component: vttablet-primary-{{ $idx }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-primary
spec:
  serviceName: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-primary
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
      app.kubernetes.io/component: vttablet-primary-{{ $idx }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
        app.kubernetes.io/component: vttablet-primary-{{ $idx }}
    spec:
      {{- if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: vttablet
          image: {{ include "vitess-minimal.renderImage" (dict "image" $.Values.images.vttablet "Values" $.Values) }}
          # Ensure the vttablet binary is invoked explicitly; some images lack ENTRYPOINT
          command:
            - "/vt/bin/vttablet"
          env:
            - name: VTROOT
              value: "/vt"
            - name: VTDATAROOT
              value: "/vt/vtdataroot"
          args:
            - "--topo_implementation=etcd2"
            - "--topo_global_server_address={{ include "vitess-minimal.etcdClientHost" $ }}:2379"
            - "--topo_global_root=/vitess/global"
            - "--init_db_sql_file=/vt/config/init_db.sql"
            - "--tablet_dir=tablet"
            - "--log_dir=/vt/logs"
            - "--port=15002"
            - "--grpc_port=15999"
            - "--service_map=grpc-queryservice,grpc-tabletmanager,grpc-updatestream"
            - "--init_keyspace={{ $.Values.topology.keyspace }}"
            - "--init_shard={{ $shard }}"
            - "--init_tablet_type=PRIMARY"
            {{- range $.Values.vttablet.mysql.extraArgs }}
            - {{ . | quote }}
            {{- end }}
            - "--syslog=false"
          volumeMounts:
            - name: data
              mountPath: /vt/vtdataroot
            {{- if $.Values.vttablet.mysql.initDb.enabled }}
            - name: initdb
              mountPath: /vt/config
              readOnly: true
            {{- end }}
      {{- if $.Values.vttablet.mysql.initDb.enabled }}
      volumes:
        - name: initdb
          configMap:
            name: {{ include "vitess-minimal.fullname" $ }}-vttablet-initdb
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if $.Values.persistence.storageClass }}
        storageClassName: {{ $.Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.persistence.size }}
---
{{- if gt (int $.Values.vttablet.replicasPerShard) 1 }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-replica
spec:
  clusterIP: None
  selector:
    app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
    app.kubernetes.io/component: vttablet-replica-{{ $idx }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-replica
spec:
  serviceName: {{ include "vitess-minimal.fullname" $ }}-vttablet-{{ $idx }}-replica
  replicas: {{ sub $.Values.vttablet.replicasPerShard 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
      app.kubernetes.io/component: vttablet-replica-{{ $idx }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "vitess-minimal.name" $ }}
        app.kubernetes.io/component: vttablet-replica-{{ $idx }}
    spec:
      {{- if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: vttablet
          image: {{ include "vitess-minimal.renderImage" (dict "image" $.Values.images.vttablet "Values" $.Values) }}
          # Ensure the vttablet binary is invoked explicitly; some images lack ENTRYPOINT
          command:
            - "/vt/bin/vttablet"
          env:
            - name: VTROOT
              value: "/vt"
            - name: VTDATAROOT
              value: "/vt/vtdataroot"
          args:
            - "--topo_implementation=etcd2"
            - "--topo_global_server_address={{ include "vitess-minimal.etcdClientHost" $ }}:2379"
            - "--topo_global_root=/vitess/global"
            - "--init_db_sql_file=/vt/config/init_db.sql"
            - "--tablet_dir=tablet"
            - "--log_dir=/vt/logs"
            - "--port=15002"
            - "--grpc_port=15999"
            - "--service_map=grpc-queryservice,grpc-tabletmanager,grpc-updatestream"
            - "--init_keyspace={{ $.Values.topology.keyspace }}"
            - "--init_shard={{ $shard }}"
            - "--init_tablet_type=REPLICA"
            {{- range $.Values.vttablet.mysql.extraArgs }}
            - {{ . | quote }}
            {{- end }}
            - "--syslog=false"
          volumeMounts:
            - name: data
              mountPath: /vt/vtdataroot
            {{- if $.Values.vttablet.mysql.initDb.enabled }}
            - name: initdb
              mountPath: /vt/config
              readOnly: true
            {{- end }}
      {{- if $.Values.vttablet.mysql.initDb.enabled }}
      volumes:
        - name: initdb
          configMap:
            name: {{ include "vitess-minimal.fullname" $ }}-vttablet-initdb
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if $.Values.persistence.storageClass }}
        storageClassName: {{ $.Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ $.Values.persistence.size }}
{{- end }}
---
{{- end }}
